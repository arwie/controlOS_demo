#!/usr/bin/python -Bu

from shared import websocket
import numpy as np
import cv2 as cv
from pypylon import pylon
import logging
import tornado, asyncio

logging.getLogger('tornado.access').setLevel(logging.WARNING)
logging.root.addHandler(logging.StreamHandler())


conf = {"m": [[3234.353607049094, 0.0, 611.797303174998], [0.0, 3228.3250731952035, 444.8457414925399], [0.0, 0.0, 1.0]], "d": [[-0.396674204429899, -0.1236262457444551, 0.0021836229802438237, 0.0014893041223838412, -17.27379626830661]], "h": [[1.547217951783606, 0.0220367282693701, -51.33825262123481], [-0.018098092535880534, 1.5494509890559192, -121.89146858373576], [5.76343017816441e-06, 2.077412533814354e-06, 1.0]]}

m = np.array(conf['m'])
d = np.array(conf['d'])
h = np.array(conf['h'])
n,_ = cv.getOptimalNewCameraMatrix(m, d, (1280,960), 1, (1280,960))


camera = pylon.InstantCamera(pylon.TlFactory.GetInstance().CreateFirstDevice())
camera.Open()
camera.TriggerMode.SetValue('On')
camera.BslImmediateTriggerMode.SetValue('On')
camera.TriggerSource.SetValue('Software')
camera.PixelFormat.SetValue('RGB8')
camera.BslColorSpaceMode.SetValue('RGB')
camera.ExposureAuto.SetValue('Off')
camera.ExposureTime.SetValue(350)
camera.GainAuto.SetValue('Off')
camera.Gain.SetValue(0)
camera.StartGrabbing(pylon.GrabStrategy_LatestImageOnly)


cvConverter = pylon.ImageFormatConverter()
cvConverter.OutputPixelFormat  = pylon.PixelType_BGR8packed
cvConverter.OutputBitAlignment = pylon.OutputBitAlignment_MsbAligned



def retrieveImage():
	with camera.RetrieveResult(5000, pylon.TimeoutHandling_ThrowException) as result:
		img = cvConverter.Convert(result).GetArray()
		img = cv.undistort(img, m, d, None, n)
		img = cv.warpPerspective(img, h, (1900,1280))
		return img


def findItems(img, trigger=0):
	items = []
	
	bw = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
	bw = cv.blur(bw, (25,25))
	ret,bw = cv.threshold(bw, 180, 255, cv.THRESH_BINARY_INV)
	#show(bw)
	
	contours,hierarchy = cv.findContours(bw, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE)
	cv.drawContours(img, contours, -1, (0,255,0), 3)
	
	for i,h in enumerate(hierarchy[0] if contours else []):
		if h[3] < 0:
			continue
		
		inner = contours[i]
		outer = contours[h[3]]
		
		outerArea = cv.contourArea(outer)
		innerArea = cv.contourArea(inner)
		print(outerArea, innerArea)
		if abs(outerArea-25500)>2000 or abs(innerArea-6000)>1000:
			continue
		
		(x,y),radius = cv.minEnclosingCircle(inner)
		cv.circle(img, (int(x),int(y)), 20, (0,0,255), -1)
		
		items.append({
			'pos': {
				'x':	x/10,
				'y':	y/10,
				'z':	-8,
				'r':	0
			}
		})
	
	items.sort(key=lambda e: e['pos']['x'], reverse=True)
	return items



class Shaker:
	async def connect(self):
		self.reader,self.writer = await asyncio.open_connection('90.0.0.22', 6001)
	
	async def command(self, cmd, params):
		self.writer.write(';'.join([str(p) for p in [cmd, *params]]).encode())
		await self.writer.drain()
		r = await self.reader.readline()
		print('shaker response: {}'.format(r.decode()))
	
	async def flash(self):
		await self.command(10, [1,10,0.4])
		await asyncio.sleep(0.2)
	
	async def feed(self, t):
		await self.command(8, [25, 0,0, 0,0, 30,0, 0,0])
		await self.command(9, [t])
		await asyncio.sleep(t+0.1)
	
	async def shake(self, t):
		await self.command(8, [33, 20,0, 28,0, 0,0, 0,0])
		await self.command(9, [t])
		await asyncio.sleep(t+1.5)



imageConnections = []

class ImageHandler(tornado.websocket.WebSocketHandler):
	def check_origin(self, origin):
		return True
	def open(self):
		print('connected')
		imageConnections.append(self)
	def on_close(self):
		imageConnections.remove(self)

def startImageHandler():
	tornado.web.Application([('/', ImageHandler)]).listen(55003)

def sendImage(image):
	ret,jpg = cv.imencode('.jpg', cv.resize(image, None, fx=0.6,fy=0.6))
	for conn in imageConnections:
		conn.write_message(jpg.tobytes(), binary=True)

def show(img, time=0):
	sendImage(img)
	return
	cv.namedWindow('image', cv.WINDOW_NORMAL)
	cv.resizeWindow('image', 900,900)
	cv.imshow('image', img)
	cv.waitKey(time)


class ShakerClient(websocket.Client):
	def __init__(self):
		self.initialize('90.0.0.1', 55003)
		self.shaker = Shaker()
	
	async def onInit(self):
		startImageHandler()
		await self.shaker.connect()
	
	async def onOpen(self):
		self.writeMessageJson({})
	
	async def onMessageJson(self, msg):
		await self.shaker.feed(1.5)
		await self.shaker.shake(1.3)
		img = await self.capture()
		items = findItems(img)
		for item in items:
			print(item)
			self.writeMessageJson(item)
		self.writeMessageJson({})
		show(img, 100)
	
	async def capture(self):
		await self.shaker.flash()
		camera.ExecuteSoftwareTrigger()
		return retrieveImage()


websocket.run(ShakerClient())
exit()


async def testLoop():
	shaker = Shaker()
	await shaker.connect()
	await shaker.flash()
	camera.ExecuteSoftwareTrigger()
	img = retrieveImage()
	show(img)
	return
	
	await asyncio.sleep(1)
	await shaker.feed()
	await asyncio.sleep(3)
	await shaker.shake()
	return
	
	while(True):
		await asyncio.sleep(1)
		
		img = retrieveImage()
		items = findItems(img)
		show(img, 333)

		print(items)

asyncio.get_event_loop().create_task(testLoop())
startImageHandler()
tornado.ioloop.IOLoop.current().start()

#!/usr/bin/python -Bu

from shared import websocket
import numpy as np
import cv2 as cv


cap = cv.VideoCapture('/dev/video0', cv.CAP_V4L2)

cap.set(cv.CAP_PROP_BUFFERSIZE, 1)
cap.set(cv.CAP_PROP_FOURCC, cv.VideoWriter_fourcc('Y','U','Y','V'))
cap.set(cv.CAP_PROP_CONVERT_RGB, 0)
cap.set(cv.CAP_PROP_FORMAT, -1)
cap.set(cv.CAP_PROP_FRAME_WIDTH, 1280)
cap.set(cv.CAP_PROP_FRAME_HEIGHT, 960)
cap.set(cv.CAP_PROP_SHARPNESS, 0)
cap.set(cv.CAP_PROP_AUTOFOCUS, 0)
cap.set(cv.CAP_PROP_FOCUS, 60)
cap.set(cv.CAP_PROP_AUTO_EXPOSURE, 1)
cap.set(cv.CAP_PROP_EXPOSURE, 3)



def getRaw():
	cap.grab()	#clear buffer
	ret,frame = cap.read()
	return cv.cvtColor(frame, cv.COLOR_YUV2GRAY_YUYV)

def getImage():
	homography = np.array([[-2.64775813e+00, -1.03469375e-01, 2.66602673e+03],[1.18218397e-02, -2.77722517e+00, 2.13563180e+03],[3.31794082e-06, -1.02626229e-04, 1.00000000e+00]])
	img = getRaw()
	return cv.warpPerspective(img, homography, (1750,1750))




class StateClient(websocket.Client):
	def __init__(self):
		self.initialize('mc', 55003)
	
	async def onMessageJson(self, msg):
		self.findObjects()
	
	async def onOpen(self):
		self.rescan()
	
	def rescan(self):
		self.writeMessageJson({})
	
	def findObjects(self):
		gray = getImage()
		
		img = cv.GaussianBlur(gray, (25, 25), 0)
		ret,img = cv.threshold(img, 0, 255, cv.THRESH_BINARY_INV+cv.THRESH_OTSU)
		
		contours,h = cv.findContours(img, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
		
		rescan = False
		for c in contours:
			(x,y),r	= cv.minEnclosingCircle(c)
			a		= cv.contourArea(c)
			
			if (abs(89-r)<5) and (abs(22000-a)<2000):
				self.writeMessageJson({'pos':{'x':-y/10+65, 'y':+x/10-95, 'z':0, 'r':0}})
			else:
				rescan = True
		
		if rescan:
			self.rescan()
		else:
			self.close()


websocket.run(StateClient())


cap.release()

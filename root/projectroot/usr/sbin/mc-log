#!/usr/bin/python -Bu

# Copyright (c) 2016 Artur Wiebe <artur@4wiebe.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


from shared import websocket
import logging, argparse, time, json, struct, sys


parser = argparse.ArgumentParser()
parser.add_argument("host")
parser.add_argument("port")
args = parser.parse_args()



def export(msg):
	for key, value in msg.items():
		if not isinstance(value, str):
			value = json.dumps(value)
		if '\n' in value:
			print(key.upper())
			value = value.translate({ord(c):None for c in '\r'}).encode()
			sys.stdout.buffer.write(struct.pack('<Q', len(value)))
			sys.stdout.buffer.write(value)
			print()
		else:
			print('{}={}'.format(key.upper(), value))
	print()


def process(msg):
	msg['__REALTIME_TIMESTAMP']		= int(time.time()      * 1000000)
	msg['__MONOTONIC_TIMESTAMP']	= int(time.monotonic() * 1000000)
	msg['SYSLOG_IDENTIFIER']		= msg.get('lib', 'mc')
	
	export(msg)


class LogClient(websocket.Client):
	def __init__(self):
		self.initialize(args.host, args.port)
	
	async def onMessageJson(self, msg):
		process(msg)


websocket.run(LogClient())

<?# Copyright (c) 2019 Artur Wiebe <artur@4wiebe.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
?>


<?$can = device_busDevices('can'); if (empty($can)) return;?>


common shared can_busnumber as const long = 1
common shared can_cycletime as const long = 4000	'{4000,2000,1000}[µs]


import_c USER_CAN_CNTRL_WORD_SET_RAW(byval as long, byval as long) as long				'(int dadd, int iCntrlWord)



<?lib_init()?>
	bus[can_busnumber].phase = 0
	sleepActive(300)

<?
	foreach($can as $dev) {
		switch ($dev['device']) {
			case 'stepim':
				ll('can_sdoWrite('.$dev['address'].', 0x262C, 0, 32, 150000)');								#262Ch – Sync Allowed Window
				ll('can_sdoWrite('.$dev['address'].', 0x1017, 0, 16, 0)');
				ll('can_sdoWrite('.$dev['address'].', 0x1006, 0, 32, can_cycletime)');
				ll('can_sdoWrite('.$dev['address'].', 0x60C2, 1, 8,  can_cycletime/1000)');
				ll('can_sdoWrite('.$dev['address'].', 0x60C2, 2, 8,  -3)');
				ll('IntergratedStepperMapPDO('.$dev['address'].')');
				break;
		}
	}
?>
end sub


<?lib_start()?>
	bus[can_busnumber].cycletime = can_cycletime
	bus[can_busnumber].phase = 4
	sleepActive(100)
end sub



public sub can_write(byval slave_ as long, byval index_ as long, byval subindex_ as long, byval size_ as long, byval value_ as long)
	dim pdo_ as pdo_type
	select case index_ * can_active
	case 0x6040
		dropLong(USER_CAN_CNTRL_WORD_SET_RAW(slave_, value_))
	case else
		can_sdoWrite(slave_, index_, subindex_, size_, value_)
	end select
end sub

public function can_read(byval slave_ as long, byval index_ as long, byval subindex_ as long) as long
	dim refCnt_ as long
	select case index_ * can_active
	case 0x6041
		can_read = CAN_PDO_Read_atomic(slave_, 1, 0, 2, refCnt_)
	case 0x60FD
		can_read = CAN_PDO_Read_atomic(slave_, 2, 0, 4, refCnt_)
	case else
		can_read = can_sdoRead(slave_, index_, subindex_)
	end select
end function



public sub can_sleepCycle
	sleep max(1, can_cycletime/1000)
end sub



<?$xdoCatchThrowLog = function($valueType=false) {
	catchThrowLog([
		'com_putLong("/slave", slave_)',
		'com_putString("/index", hex$(index_)+"h")',
		'com_putLong("/subindex", subindex_)',
		($valueType) ? 'com_put'.ucfirst($valueType).'("/value", value_)' : false,
	]);
}?>


public sub can_sdoWrite(byval slave_ as long, byval index_ as long, byval subindex_ as long, byval size_ as long, byval value_ as long)
	try
		CAN_SDO_WRITE(slave_, index_, subindex_, size_, value_)
	<?$xdoCatchThrowLog('long')?>
end sub


public function can_sdoRead(byval slave_ as long, byval index_ as long, byval subindex_ as long) as long
	try
		can_sdoRead = CAN_SDO_READ(slave_, index_, subindex_)
	<?$xdoCatchThrowLog()?>
end function


public function can_readString(byval slave_ as long, byval index_ as long, byval subindex_ as long) as string
	try
		can_readString = CAN_SDO_READ_STRING(slave_, index_, subindex_)
	<?$xdoCatchThrowLog()?>
end function

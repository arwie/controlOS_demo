<?# Copyright (c) 2019 Artur Wiebe <artur@4wiebe.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
?>


<?$axes = array_filter(device_axes(), function($ax) { return !$ax['simulated']; }); if (empty($axes)) return;?>

<?com_fifo()?>


dim shared healthQueryIntervalMs	as const long	= 32*60*1000 / 64
dim shared errorHistoryDelayMs		as const long	= 300

dim shared this_logHealthId			as long = -32



<?lib_prgEvent(1)?>
	<?foreach($axes as $ax=>$axis) {?>
		if <?=$ax?>_driveLogError then
			com_clear()
			com_putLong("/id", <?=$axis['elementid']?>)
			com_putLong("/clock", system.clock+errorHistoryDelayMs)
			com_send(this_fifo)
		end if
	<?}?>
end sub


<?lib_prgStart()?>
	<?foreach($axes as $ax=>$axis) {?>
		<?=$ax?>_driveLogInfo()
	<?}?>
end sub

<?com_prgReceive('this_fifo', 'healthQueryIntervalMs', 16)?>
	select case receive_
	
	case com_receiveMessage
		sleepActive(max(0, com_getLong("/clock")-system.clock))
		select case com_getLong("/id")
		<?foreach($axes as $ax=>$axis) {?>
			case <?=$axis['elementid']?>'
				<?=$ax?>_driveLogHistory()
		<?}?>
		end select
	
	case com_receiveTimeout
		select case 1 + (useIncrement(this_logHealthId) mod 64)
		<?foreach($axes as $ax=>$axis) {?>
			case <?=$axis['elementid']?>'
				<?=$ax?>_driveLogHealth()
		<?}?>
		end select
	
	end select
end sub



<?commonBlock(function() {?>
public function drivelog_errorString(byval error_ as long) as string
	select case error_
	case 0x2214
		drivelog_errorString = "Over-current"
	case 0x2310
		drivelog_errorString = "Motor foldback / I2T limit"
	case 0x2311
		drivelog_errorString = "Drive foldback"
	case 0x2380
		drivelog_errorString = "Current sensors offset out-of-range"
	case 0x2381
		drivelog_errorString = "Motor phase disconnection"
	case 0x2382
		drivelog_errorString = "Output over-current detected"
	case 0x3110
		drivelog_errorString = "Over-voltage"
	case 0x3120
		drivelog_errorString = "Under-voltage"
	case 0x3180
		drivelog_errorString = "Regen over-current"
	case 0x3181
		drivelog_errorString = "STO (safe torque off) is not connected"
	case 0x3182
		drivelog_errorString = "Bus voltage measurement circuit failure"
	case 0x3183
		drivelog_errorString = "Bus AC supply line disconnect"
	case 0x4080
		drivelog_errorString = "Integrated power module over-temperature"
	case 0x4081
		drivelog_errorString = "Control board over-temperature"
	case 0x4310
		drivelog_errorString = "Drive over-temperature"
	case 0x4410
		drivelog_errorString = "Motor over-temperature"
	case 0x5111
		drivelog_errorString = "Control +/-15V out-of-range"
	case 0x5180
		drivelog_errorString = "5V out of range"
	case 0x5530
		drivelog_errorString = "Power board EEPROM fault"
	case 0x5581
		drivelog_errorString = "Control digital board EEPROM fault"
	case 0x5582
		drivelog_errorString = "CAN voltage supply fault"
	case 0x5583
		drivelog_errorString = "Self test failed"
	case 0x5585
		drivelog_errorString = "Parameter memory checksum failure"
	case 0x5586
		drivelog_errorString = "Failure writing to flash memory"
	case 0x6101
		drivelog_errorString = "Internal error"
	case 0x6102
		drivelog_errorString = "Realtime overload fault"
	case 0x6381
		drivelog_errorString = "Drive not configured"
	case 0x6581
		drivelog_errorString = "FPGA configuration failure"
	case 0x7111
		drivelog_errorString = "Index line break"
	case 0x7112
		drivelog_errorString = "Open load on the power brake output"
	case 0x7113
		drivelog_errorString = "Short circuit on the power brake output"
	case 0x7114
		drivelog_errorString = "Fieldbus - Target position exceeds velocity limit"
	case 0x7116
		drivelog_errorString = "EtherCAT cable disconnected"
	case 0x7117
		drivelog_errorString = "Fieldbus target command lost"
	case 0x711D
		drivelog_errorString = "EtherCAT packets lost"
	case 0X711E
		drivelog_errorString = "CAN/EtherCAT state not operational"
	case 0x711F
		drivelog_errorString = "Power brake fault"
	case 0x7180
		drivelog_errorString = "Secondary encoder (feedback) index break"
	case 0x7181
		drivelog_errorString = "Secondary encoder (feedback) A/B line break"
	case 0x7182
		drivelog_errorString = "Pulse & direction input line break"
	case 0x7310
		drivelog_errorString = "Over-speed"
	case 0x7380
		drivelog_errorString = "Feedback communication error"
	case 0x7381
		drivelog_errorString = "Nikon encoder (feedback) operation fault"
	case 0x7382
		drivelog_errorString = "Tamagawa feedback initialization failed"
	case 0x7383
		drivelog_errorString = "A/B Line break"
	case 0x7384
		drivelog_errorString = "Illegal Halls"
	case 0x7385
		drivelog_errorString = "Absolute encoder battery low-voltage"
	case 0x7385
		drivelog_errorString = "Tamagawa battery low voltage"
	case 0x7386
		drivelog_errorString = "PLL synchronization failed"
	case 0x7388
		drivelog_errorString = "Tamagawa abs operational fault"
	case 0x7389
		drivelog_errorString = "Custom absolute encoder operational fault"
	case 0x738A
		drivelog_errorString = "Differential Halls line break"
	case 0x738B
		drivelog_errorString = "Encoder phase error"
	case 0x738C
		drivelog_errorString = "AqB commutation fault"
	case 0x738D
		drivelog_errorString = "ServoSense Encoder Fault"
	case 0x7390
		drivelog_errorString = "Sankyo absolute encoder fault"
	case 0x7582
		drivelog_errorString = "Fieldbus target command lost"
	case 0x7781
		drivelog_errorString = "Motor setup failed"
	case 0x7782
		drivelog_errorString = "Phase find failed"
	case 0x7783
		drivelog_errorString = "Encoder simulation frequency too high"
	case 0x7784
		drivelog_errorString = "EnDat sine (feedback) communication failed"
	case 0x7785
		drivelog_errorString = "A/B out-of-range"
	case 0x7786
		drivelog_errorString = "Sine encoder quadrature"
	case 0x7787
		drivelog_errorString = "Sine/cosine calibration invalid"
	case 0x7788
		drivelog_errorString = "Encoder (feedback) 5V over-current"
	case 0x7789
		drivelog_errorString = "Secondary encoder (feedback) 5V over-current"
	case 0x778B
		drivelog_errorString = "Resolver initialization failed"
	case 0x778C
		drivelog_errorString = "Stall fault"
	case 0x778D
		drivelog_errorString = "PFB Off checksum invalid"
	case 0x778E
		drivelog_errorString = "PFB Off data mismatch"
	case 0x778F 
		drivelog_errorString = "No PFB Off data"
	case 0x7790
		drivelog_errorString = "FPGA version mismatch"
	case 0x7791
		drivelog_errorString = "Emergency stop issued"
	case 0x7792
		drivelog_errorString = "Endat2x feedback faults"
	case 0x7793
		drivelog_errorString = "Fieldbus version mismatch"
	case 0x7794
		drivelog_errorString = "ESI version mismatch"
	case 0x7796
		drivelog_errorString = "Temperature sensor failure"
	case 0x7797
		drivelog_errorString = "Pulse train frequency too high"
	case 0x7798
		drivelog_errorString = "Motor runaway condition detected"
	case 0x7799
		drivelog_errorString = "Regen resistor overload"
	case 0x7800
		drivelog_errorString = "SAVE and power cycle required"
	case 0x7801
		drivelog_errorString = "Motor plate read failed"
	case 0x8130
		drivelog_errorString = "CAN heartbeat lost"
	case 0x8180
		drivelog_errorString = "Drive locked"
	case 0x8400
		drivelog_errorString = "Velocity error"
	case 0x8481
		drivelog_errorString = "Velocity over-speed exceeded"
	case 0x8482
		drivelog_errorString = "Exceeded maximum velocity error"
	case 0x8608
		drivelog_errorString = "Secondary feedback position mismatch"
	case 0x8609
		drivelog_errorString = "PE reached software numerical limit"
	case 0x8611
		drivelog_errorString = "Exceeded maximum position error"
	case 0x8611
		drivelog_errorString = "Exceeded maximum velocity error"
	case 0xF001
		drivelog_errorString = "Acceleration / deceleration violation"
	case 0xFF00
		drivelog_errorString = "Position command error"
	case 0xFF03
		drivelog_errorString = "PLL lock lost"
	case 0xFF04
		drivelog_errorString = "Power stage fault"
	case 0xFF05
		drivelog_errorString = "Encoder failure"
	case 0xFF06
		drivelog_errorString = "Gate drive voltage failure"
	case else
		drivelog_errorString = "unknown error code"
	end select
	drivelog_errorString = drivelog_errorString + " ("+hex$(error_)+"h)"
end function
<?})?>

<?
/*
function parseErrorStrings($htmlTableFile) { #from: http://servotronix.com/html/Help_CDHD_EN/HTML/home.htm#!Documents/emergencyerrorcodesfaults.htm
	$dom = new DOMDocument(); $dom->loadHTMLFile($htmlFile);
	foreach ($dom->getElementsByTagName("tr") as $tr) {
		$td = $tr->getElementsByTagName("td");
		$errorcode   = hexdec(trim($td->item(0)->textContent)); if (!$errorcode) continue;
		$errorstring = str_replace("\n", "", trim($td->item(1)->textContent));
?>
	case 0x<?=strtoupper(dechex($errorcode))?> 
		drivelog_errorString = "<?=$errorstring?>"
<? 
	}
}
*/

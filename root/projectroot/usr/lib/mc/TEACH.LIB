<?com_websocket(55001)?>

dim shared this_disableTimeout as long


<?lib_prgStart()?>
	attach delta1
	attach conv
	tool_select(tool_typeLaser)
	tool_grip(true)
end sub

<?com_prgReceive('this_websocket', 200)?>
	select case receive_
	case com_receiveDisconnect
		allDisable()
	case com_receiveTimeout
		if anyEnabled then
			if system.clock > this_disableTimeout then
				allDisable()
			end if
		end if
	
	case com_receiveMessage
		this_disableTimeout = system.clock + 30000
		handleMessage()
	end select
	
	com_clear()
	com_putLocationXyzr("/pos",		here)
	com_putDouble("/conv",			conv.positionFeedback)
	com_putLong("/tool",			tool_type)
	com_putBool("/gripped",			tool_gripped)
	com_send(this_websocket)
end sub


<?lib_prgStop()?>
	tool_select(tool_typeNone)
	allDisable()
end sub


<?lib_prgError()?>
	allStop()
	if not prgRunning then
		teach_prgStop()
		teach_stopTrigger()
	end if
end sub



sub handleMessage
	dim cmd_ as long
	try
		cmd_ = com_getLong("/cmd")
		if cmd_>0 and not anyMoving then
			select case cmd_
			case 1
				delta1_enable()
				moveLimit(com_getLong("/dim"), com_getLong("/dir"), com_getLong("/speed"))
			case 2
				delta1_enable()
				moves com_getLocationXyzr("/pos") velocityrate=com_getLong("/speed")
			case 11
				conv_enable()
				jog conv com_getLong("/dir") * bound(6*com_getLong("/speed")/100.0, 0.01, 1) * conv.velocitymax
			end select
		else
			allStop()
			select case cmd_
			case -1
				tool_select(com_getLong("/tool"))
			case -2
				tool_grip(com_getBool("/grip"))
			end select
		end if
	<?catchLog()?>
end sub


sub moveLimit(byval dim_ as long, byval dir_ as long, byval speed_ as long)
	dim target_ as location of xyzr = setPoint
	dim step_   as location of xyzr
	dim steps_  as long
	dim orientationfollowing_ as long
	
	if dir_ > 0 then
		step_ = #{+200, +200, 150, +179}
	else
		step_ = #{-200, -200,   0, -179}
	end if
	
	select case dim_
	case 1
		steps_ = abs(target_{1} - step_{1})
		target_{1} = step_{1}
		step_ = #{dir_, 0, 0, 0}
	case 2
		steps_ = abs(target_{2} - step_{2})
		target_{2} = step_{2}
		step_ = #{0, dir_, 0, 0}
	case 3
		steps_ = abs(target_{3} - step_{3})
		target_{3} = step_{3}
		step_ = #{0, 0, dir_, 0}
	case 4
		steps_ = 1
		target_{4} = step_{4}
		if dir_ > 0 then
			orientationfollowing_ = 4
		else
			orientationfollowing_ = 6
		end if
	end select
	
	while not isMoving and useDecrement(steps_)
		try
			moves target_ velocityrate=speed_ orientationfollowing=orientationfollowing_
		catch 3121
			target_ = target_ - step_
		end try
	end while
end sub


sub allDisable
	delta1_disable()
	conv_disable()
end sub

sub allStop
	stop delta1 stoptype=ABORT
	stop conv   stoptype=ABORT
end sub

function anyMoving as long
	anyMoving = delta1.isMoving or conv.isMoving
end function

function anyEnabled as long
	anyEnabled = not (delta1_disabled and conv_disabled)
end function

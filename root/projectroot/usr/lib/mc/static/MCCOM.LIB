' Copyright (c) 2016 Artur Wiebe <artur@4wiebe.de>
'
' Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
' associated documentation files (the "Software"), to deal in the Software without restriction, 
' including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
' and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
' subject to the following conditions:
'
' The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
' IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
' WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


common shared com_channelLog				as const long		= 1
common shared com_channelNotify				as const long		= 2
common shared com_channelState				as const long		= 3
common shared com_channelFifo				as const long		= 4
common shared com_channelWebsocket			as const long		= 5
common shared com_channelFile				as const long		= 7
common shared com_channelUdpSender			as const long		= 8
common shared com_channelUdpReceiver		as const long		= 9

common shared com_receiveTimeout			as const long		= 0
common shared com_receiveMessage			as const long		= 1
common shared com_receiveConnect			as const long		= 10
common shared com_receiveDisconnect			as const long		= 11
common shared com_receiveNotify				as const long		= 20

common shared com_error						as error	"error in module mccom"		20800



import_c MCCOM_OPEN(byval as long, as long) as long
import_c MCCOM_RECEIVE(byval as long, byval as long, as long) as long
import_c MCCOM_SEND(byval as long, as long)
import_c MCCOM_SEND_SELF(byval as long, as long)
import_c MCCOM_COUNT(byval as long, as long) as long
import_c MCCOM_RESET(byval as long, as long)
import_c MCCOM_CLOSE(byval as long)
import_c MCCOM_CLOSE_ALL()
import_c MCCOM_CLEAR(as long)
import_c MCCOM_STORE(as long)
import_c MCCOM_RESTORE(as long)
import_c MCCOM_WITH(as string)
import_c MCCOM_SIZE(as string) as long
import_c MCCOM_GET_BOOL(as string, as long) as long
import_c MCCOM_GET_LONG(as string, as long) as long
import_c MCCOM_GET_DOUBLE(as string, as long) as double
import_c MCCOM_GET_STRING(as string, as long) as string
import_c MCCOM_GET_JSON(as string, as long) as string
import_c MCCOM_PUT_BOOL(as string, byval as long, as long)
import_c MCCOM_PUT_LONG(as string, byval as long, as long)
import_c MCCOM_PUT_DOUBLE(as string, byval as double, as long)
import_c MCCOM_PUT_STRING(as string, as string, as long)
import_c MCCOM_PUT_JSON(as string, as string, as long)



public function com_open(byval channleType as long) as long
	dim err as long
	com_open = MCCOM_OPEN(channleType, err)
	if err then
		throw com_error
	end if
end function


public function com_receive(byval channelId as long, byval tout as long) as long
	dim err as long
	com_receive = MCCOM_RECEIVE(channelId, tout, err)
	if err then
		throw com_error
	end if
end function


public sub com_send(byval channelId as long)
	dim err as long
	MCCOM_SEND(channelId, err)
	if err then
		throw com_error
	end if
end sub

public sub com_sendSelf(byval channelId as long)
	dim err as long
	if channelId then
		MCCOM_SEND_SELF(channelId, err)
		if err then
			throw com_error
		end if
	end if
end sub


public function com_count(byval channelId as long) as long
	dim err as long
	com_count = MCCOM_COUNT(channelId, err)
	if err then
		throw com_error
	end if
end function


public sub com_reset(byval channelId as long)
	dim err as long
	MCCOM_RESET(channelId, err)
	if err then
		throw com_error
	end if
end sub


public sub com_close(channelId as long)
	MCCOM_CLOSE(channelId)
	channelId = false
end sub

public sub com_closeAll
	MCCOM_CLOSE_ALL()
end sub


public sub com_clear
	dim err as long
	MCCOM_CLEAR(err)
	if err then
		throw com_error
	end if
end sub


public sub com_store
	dim err as long
	MCCOM_STORE(err)
	if err then
		throw com_error
	end if
end sub

public sub com_restore
	dim err as long
	MCCOM_RESTORE(err)
	if err then
		throw com_error
	end if
end sub


public sub com_with(byval path as string)
	MCCOM_WITH(path)
end sub


public function com_size(byval path as string) as long
	com_size = MCCOM_SIZE(path)
end function


public function com_getBool(byval path as string) as long
	dim err as long
	com_getBool = MCCOM_GET_BOOL(path, err)
	if err then
		throw com_error
	end if
end function

public function com_getLong(byval path as string) as long
	dim err as long
	com_getLong = MCCOM_GET_LONG(path, err)
	if err then
		throw com_error
	end if
end function

public function com_getDouble(byval path as string) as double
	dim err as long
	com_getDouble = MCCOM_GET_DOUBLE(path, err)
	if err then
		throw com_error
	end if
end function

public function com_getString(byval path as string) as string
	dim err as long
	com_getString = MCCOM_GET_STRING(path, err)
	if err then
		throw com_error
	end if
end function

public function com_getJson(byval path as string) as string
	dim err as long
	com_getJson = MCCOM_GET_JSON(path, err)
	if err then
		throw com_error
	end if
end function


public function com_getLocationXy(byval path as string) as location of xy
	com_getLocationXy = #{com_getDouble(path+"/x"), com_getDouble(path+"/y")} 
end function

public function com_getLocationXyzr(byval path as string) as location of xyzr
	com_getLocationXyzr = #{com_getDouble(path+"/x"), com_getDouble(path+"/y"), com_getDouble(path+"/z"), com_getDouble(path+"/r")} 
end function

public function com_getJointXyzr(byval path as string) as joint of xyzr
	com_getJointXyzr = {com_getDouble(path+"/0"), com_getDouble(path+"/1"), com_getDouble(path+"/2"), com_getDouble(path+"/3")} 
end function


public sub com_putBool(byval path as string, byval boolValue as long)
	dim err as long
	MCCOM_PUT_BOOL(path, boolValue, err)
	if err then
		throw com_error
	end if
end sub

public sub com_putLong(byval path as string, byval longValue as long)
	dim err as long
	MCCOM_PUT_LONG(path, longValue, err)
	if err then
		throw com_error
	end if
end sub

public sub com_putDouble(byval path as string, byval doubleValue as double)
	dim err as long
	MCCOM_PUT_DOUBLE(path, doubleValue, err)
	if err then
		throw com_error
	end if
end sub

public sub com_putString(byval path as string, byval stringValue as string)
	dim err as long
	MCCOM_PUT_STRING(path, stringValue, err)
	if err then
		throw com_error
	end if
end sub

public sub com_putStringRef(byval path as string, stringValue as string)
	dim err as long
	MCCOM_PUT_STRING(path, stringValue, err)
	if err then
		throw com_error
	end if
end sub

public sub com_putJson(byval path as string, byval jsonValue as string)
	dim err as long
	MCCOM_PUT_JSON(path, jsonValue, err)
	if err then
		throw com_error
	end if
end sub


public sub com_putLocationXy(byval path as string, byval pos as location of xy)
	com_putDouble(path+"/x", pos{1})
	com_putDouble(path+"/y", pos{2})
end sub

public sub com_putLocationXyz(byval path as string, byval pos as location of xyz)
	com_putDouble(path+"/x", pos{1})
	com_putDouble(path+"/y", pos{2})
	com_putDouble(path+"/z", pos{3})
end sub

public sub com_putLocationXyzr(byval path as string, byval pos as location of xyzr)
	com_putDouble(path+"/x", pos{1})
	com_putDouble(path+"/y", pos{2})
	com_putDouble(path+"/z", pos{3})
	com_putDouble(path+"/r", pos{4})
end sub


public sub com_putJointXy(byval path as string, byval jnt as joint of xy)
	com_putDouble(path+"/0", jnt{1})
	com_putDouble(path+"/1", jnt{2})
end sub

public sub com_putJointXyz(byval path as string, byval jnt as joint of xyz)
	com_putDouble(path+"/0", jnt{1})
	com_putDouble(path+"/1", jnt{2})
	com_putDouble(path+"/2", jnt{3})
end sub

public sub com_putJointXyzr(byval path as string, byval jnt as joint of xyzr)
	com_putDouble(path+"/0", jnt{1})
	com_putDouble(path+"/1", jnt{2})
	com_putDouble(path+"/2", jnt{3})
	com_putDouble(path+"/3", jnt{4})
end sub

public sub com_putJointXyzrp(byval path as string, byval jnt as joint of xyzrp)
	com_putDouble(path+"/0", jnt{1})
	com_putDouble(path+"/1", jnt{2})
	com_putDouble(path+"/2", jnt{3})
	com_putDouble(path+"/3", jnt{4})
	com_putDouble(path+"/4", jnt{5})
end sub


public sub com_sendCmd(byval channelId as long, byval cmd_ as long)
	com_putLong("/cmd",  cmd_)
	com_send(channelId)
end sub

public sub com_sendSelfCmd(byval channelId as long, byval cmd_ as long)
	com_putLong("/cmd",  cmd_)
	com_sendSelf(channelId)
end sub

public function com_getCmd as long
	com_getCmd = com_getLong("/cmd")
end function

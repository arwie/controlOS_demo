<?# Copyright (c) 2019 Artur Wiebe <artur@4wiebe.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
?>


type xyzr_posType
	xyzr		as location of xyzr
	arm		as long
end type




public function xyzr_pos(byval xyzr_ as location of xyzr, byval arm_ as long) as xyzr_posType
	xyzr_pos->xyzr = xyzr_
	xyzr_pos->arm  = arm_
end function


public function xyzr_posOffset(byval pos_ as xyzr_posType, byval offset_ as location of xyzr) as xyzr_posType
	xyzr_posOffset->xyzr = pos_->xyzr + offset_
	xyzr_posOffset->arm  = pos_->arm
end function



public function xyzr_jntToPos(robot_ as generic group, byval jnt_ as joint of xyzr) as xyzr_posType
	xyzr_jntToPos->xyzr = tocart(robot_, jnt_)
	xyzr_jntToPos->arm  = xyzr_armOfJnt(jnt_)
end function


public function xyzr_armOfJnt(byval jnt_ as joint of xyzr) as long
	select case sin(jnt_{2}*PI/180)
	case is < 0
		xyzr_armOfJnt = lefty
	case is > 0
		xyzr_armOfJnt = righty
	case else 
		xyzr_armOfJnt = 0
	end select
end function


public function xyzr_posToJnt(robot_ as generic group, byval pos_ as xyzr_posType) as joint of xyzr
	'configuration for SCARA robot: Arm (Bit 0): value=0 – Lefty (armcd = 1); value=1 – Righty (armcmd = 2)
	xyzr_posToJnt = tojoint(robot_, pos_->xyzr, pos_->arm - 1)
end function



public function xyzr_isSamePos(byval oldPos as xyzr_posType, byval newPos as xyzr_posType, byval toleranceTrans as double, byval toleranceRot as double) as long
	xyzr_isSamePos = (distl(newPos->xyzr, oldPos->xyzr) <= toleranceTrans  and  distr(newPos->xyzr, oldPos->xyzr) <= toleranceRot  and  newPos->arm = oldPos->arm)
end function



public function xyzr_robotHerePos(robot_ as generic group) as xyzr_posType
	xyzr_robotHerePos = xyzr_jntToPos(robot_, robot_.positionfeedback)
end function


public function xyzr_robotDestPos(robot_ as generic group) as xyzr_posType
	xyzr_robotDestPos = xyzr_jntToPos(robot_, robot_.dest_joint)
end function


public function xyzr_robotDestArm(robot_ as generic group) as long
	xyzr_robotDestArm = xyzr_armOfJnt(robot_.dest_joint)
end function



public function xyzr_comGetPos(byval path as string) as xyzr_posType
	xyzr_comGetPos->xyzr = com_getLocationXyzr(path)
	xyzr_comGetPos->arm  = com_getLong(path+"/arm")
end function


public sub xyzr_comPutPos(byval path as string, byval pos as xyzr_posType)
	com_putLocationXyzr(path, pos->xyzr)
	com_putLong(path+"/arm", pos->arm)
end sub

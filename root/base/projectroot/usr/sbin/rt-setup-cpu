#!/usr/bin/python -Bu

# Copyright (c) 2023 Artur Wiebe <artur@4wiebe.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


import time
from argparse import ArgumentParser
from contextlib import suppress
from pathlib import Path
from shared import log, system


parser = ArgumentParser()
parser.add_argument(
	"--ksoftirqd-priority",
	help="ksoftirqd priority (80)",
	default='80'
)
parser.add_argument(
	"--scaling-governor",
	help="max cpuidle latency (performance)",
	default='performance'
)
parser.add_argument(
	"--cpuidle-latency",
	help="max cpuidle latency (50)",
	default='50'
)
args = parser.parse_args()



def cpu_path(cpu:str|None, query:str):
	return Path('/sys/devices/system/cpu', f'cpu{cpu}' if cpu else '', query)

def cpu_set(query:str):
	result:set[str] = set()
	for c in cpu_path(None, query).read_text().rstrip().split(','):
		if '-' in c:
			c = c.split('-')
			for c in range(int(c[0]), int(c[1])+1):
				result.add(str(c))
		else:
			result.add(c)
	return result


isolated = cpu_set('isolated')
regular  = cpu_set('present') - isolated
log.info(f'CPUs: isolated={isolated}, regular={regular}')


# Set IRQ threads affinity
for irq in Path('/proc/irq').glob('[0-9]*'):
	affinity = Path(irq, 'smp_affinity_list')
	with suppress(Exception):
		if affinity.read_text().startswith('0-'):
			log.info(f'Setting IRQ affinity for irq {irq.stem}')
			affinity.write_text(','.join(regular))


# Set the priority of the ksoftirqd on the isolated cores
if args.ksoftirqd_priority:
	for cpu in isolated:
		log.info(f'Setting ksoftirqd priority {args.ksoftirqd_priority} for cpu {cpu}')
		pid = system.run(['pgrep', f'ksoftirqd/{cpu}'], True, text=True).rstrip()
		system.run(['chrt','-fp', args.ksoftirqd_priority, pid])


# Set the scaling governor for isolated cores
if args.scaling_governor:
	for cpu in isolated:
		log.info(f'Setting scaling governor {args.scaling_governor} for cpu {cpu}')
		cpu_path(cpu, 'cpufreq/scaling_governor').write_text(args.scaling_governor)


# Disable sleep states that can interfere with real-time requirements
for cpu in isolated:
	cpuidle = cpu_path(cpu, 'cpuidle')
	if cpuidle.exists():
		for state in cpuidle.glob('state[0-9]*'):
			latency = int(Path(state, 'latency').read_text())
			if latency > int(args.cpuidle_latency):
				log.info(f'Disabling cpuidle {state.stem} (latency: {latency}) for cpu {cpu}')
				Path(state, 'disable').write_bytes(b'1')


# Toggle cpu offline state to move away IRQ threads
for cpu in isolated:
	online = cpu_path(cpu, 'online')
	if online.exists():
		log.info(f'Toggling offline state for cpu {cpu}')
		online.write_bytes(b'0')
		time.sleep(0.1)
		online.write_bytes(b'1')

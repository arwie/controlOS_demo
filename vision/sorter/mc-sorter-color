#!/usr/bin/python -Bu

from shared import websocket
import numpy as np
import cv2 as cv
from pypylon import pylon
import logging
import tornado, asyncio

logging.getLogger('tornado.access').setLevel(logging.WARNING)
logging.root.addHandler(logging.StreamHandler())


conf = {"m": [[4426.628456070167, 0.0, 586.286817678153], [0.0, 4441.817619859583, 450.23923705670006], [0.0, 0.0, 1.0]], "d": [[0.6816792488504552, 13.163809587701673, -0.0030967100410058254, -0.009383985136120576, -278.2028681797848]], "h": [[-1.134127831694609, -0.0022365285204225633, 1424.0015425889146], [0.005937869210278502, -1.1433504013529034, 1050.2621853650708], [6.476014545996702e-06, 1.0637922360192212e-06, 1.0]]}

m = np.array(conf['m'])
d = np.array(conf['d'])
h = np.array(conf['h'])
n,_ = cv.getOptimalNewCameraMatrix(m, d, (960,1280), 1, (960,1280))


camera = pylon.InstantCamera(pylon.TlFactory.GetInstance().CreateFirstDevice())
camera.Open()
camera.TriggerMode.SetValue('On')
camera.BslImmediateTriggerMode.SetValue('On')
camera.PixelFormat.SetValue('RGB8')
camera.BslColorSpaceMode.SetValue('RGB')
camera.ExposureAuto.SetValue('Off')
camera.ExposureTime.SetValue(2000)
camera.GainAuto.SetValue('Off')
camera.Gain.SetValue(8)
camera.StartGrabbing(pylon.GrabStrategy_LatestImageOnly)


cvConverter = pylon.ImageFormatConverter()
cvConverter.OutputPixelFormat  = pylon.PixelType_BGR8packed
cvConverter.OutputBitAlignment = pylon.OutputBitAlignment_MsbAligned



def retrieveImage():
	with camera.RetrieveResult(5000, pylon.TimeoutHandling_ThrowException) as result:
		img = cvConverter.Convert(result).GetArray()
		img = cv.undistort(img, m, d, None, n)
		img = cv.warpPerspective(img, h, (1400,1000))
		return img


colors = [
	(0, 0, 255),
	(0, 255, 0),
	(255, 0, 0),
	(0, 255, 255),
]


def findItems(img, trigger=0):
	items = []
	
	hsv = cv.blur(img, (15,15))
	#show(hsv)
	hsv = cv.bitwise_not(hsv)
	#show(hsv)
	hsv = cv.cvtColor(hsv, cv.COLOR_BGR2HSV_FULL)
	#show(hsv[:,:,0])
	#show(hsv[:,:,1])
	#show(hsv[:,:,2])
	
	ret,bw = cv.threshold(hsv[:,:,1], 50, 255, cv.THRESH_BINARY)
	#show(bw)
	
	contours,h = cv.findContours(bw, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
	cv.drawContours(img, contours, -1, (255,255,0), 3)
	
	
	for cnt in contours:
		area = cv.contourArea(cnt)
		if abs(area-65000) > 15000:
			continue
		print(area)
		
		mask = np.zeros_like(bw)
		cv.drawContours(mask, [cnt], -1, 255, -1)
		hue,*_ = cv.mean(hsv[:,:,0], mask=mask)
		color = (np.abs(np.array([125,200,30,170])-hue)).argmin() 
		#print('hue:', hue, 'color:',color)
		
		(x,y),r	= cv.minEnclosingCircle(cnt)
		cv.circle(img, (int(x),int(y)), 20, colors[color], -1)
		cv.circle(img, (int(x),int(y)), 20, (255,255,0), 5)
		
		items.append({
			'pos': {
				'x':	trigger - x/10,
				'y':	y/10,
				'z':	-25,
				'r':	0
			},
			'color':	int(color)
		})
		
	
	items.sort(key=lambda e: e['pos']['x'])
	return items


imageConnections = []

class ImageHandler(tornado.websocket.WebSocketHandler):
	def check_origin(self, origin):
		return True
	def open(self):
		print('connected')
		imageConnections.append(self)
	def on_close(self):
		imageConnections.remove(self)

def startImageHandler():
	tornado.web.Application([('/', ImageHandler)]).listen(55003)

def sendImage(image):
	ret,png = cv.imencode('.jpg', cv.resize(image, None, fx=0.6,fy=0.6))
	png = png.tobytes()
	for conn in imageConnections:
		conn.write_message(png, binary=True)

def show(img, time=0):
	sendImage(img)
	return
	cv.namedWindow('image', cv.WINDOW_NORMAL)
	cv.resizeWindow('image', 900,900)
	cv.imshow('image', img)
	cv.waitKey(time)


class SorterClient(websocket.Client):
	def __init__(self):
		self.initialize('90.0.0.1', 55003)
		self.minTrigger = 0
	
	async def onInit(self):
		startImageHandler()
	
	async def onMessageJson(self, msg):
		img = retrieveImage()
		items = findItems(img, msg['trigger'])
		for item in items:
			if item['pos']['x'] < self.minTrigger:
				print('duplicate: ', item)
				continue
			print(item)
			self.writeMessageJson(item)
			self.minTrigger = item['pos']['x'] + 5
		show(img, 10)


websocket.run(SorterClient())
exit()


async def testLoop():
	while(True):
		await asyncio.sleep(1)
		
		img = retrieveImage()
		items = findItems(img)
		show(img, 333)

		print(items)

asyncio.get_event_loop().create_task(testLoop())
startImageHandler()
tornado.ioloop.IOLoop.current().start()

PROGRAM Exec_Robot
VAR
	i: INT;

	GroupReadStatus: MC_GroupReadStatus;
	GroupPower: SMC_GroupPower;
	GroupReset: MC_GroupReset;
	
	GroupSetOverride: MC_GroupSetOverride;
	GroupHalt: MC_GroupHalt;

	GroupSetPosition: MC_GroupSetPosition;

	MoveDirectAbsolute: MC_MoveDirectAbsolute;
	MoveLinearAbsolute: MC_MoveLinearAbsolute;

	GroupJog: SMC_GroupJog2;
END_VAR
////////////////////////////////

GroupReadStatus(
	AxisGroup := Robot,	
	Enable := TRUE,
);

GroupReset(
	AxisGroup := Robot,
	Execute :=  app.cmd.rbt_reset AND GroupReadStatus.GroupErrorStop,
);


GroupPower(
	AxisGroup := Robot,
	Enable := TRUE,
	bRegulatorOn := app.cmd.rbt_power OR GroupReadStatus.GroupMoving OR GroupReadStatus.GroupStopping,
	bDriveStart  := app.cmd.rbt_power OR GroupReadStatus.GroupMoving OR GroupReadStatus.GroupStopping,
	Status => app.fbk.rbt_powered
);


GroupSetOverride(
	AxisGroup := Robot,
	Enable := GroupPower.Status AND NOT GroupReadStatus.GroupErrorStop,
	VelFactor     := app.cmd.rbt_override,
	PathVelFactor := app.cmd.rbt_override,
);


GroupHalt(
	AxisGroup := Robot,
	Execute := GroupPower.Status AND app.cmd.rbt_move = 0,
	Deceleration := app.cfg.robot_acc,
	Jerk         := app.cfg.robot_jrk,
);


app.fbk.rbt_move_done  := FALSE;
app.fbk.rbt_move_error := FALSE;


//-1: Homing
GroupSetPosition.Position.a.a0 := app.cmd.rbt_move_coord[0] + Robot_A.fSetPosition - Robot_A.fActPosition;
GroupSetPosition.Position.a.a1 := app.cmd.rbt_move_coord[1] + Robot_B.fSetPosition - Robot_B.fActPosition;
GroupSetPosition.Position.a.a2 := app.cmd.rbt_move_coord[2] + Robot_C.fSetPosition - Robot_C.fActPosition;
GroupSetPosition(
	AxisGroup := Robot,
	Execute := app.cmd.rbt_move = -1,
	CoordSystem := SMC_COORD_SYSTEM.ACS,
);
app.fbk.rbt_move_done  := app.fbk.rbt_move_done  OR GroupSetPosition.Done;
app.fbk.rbt_move_error := app.fbk.rbt_move_error OR GroupSetPosition.Error;


//1: MoveDirectAbsolute
MEMUtils.MemCpy(ADR(MoveDirectAbsolute.Position.v), ADR(app.cmd.rbt_move_coord), SIZEOF(app.cmd.rbt_move_coord));
MoveDirectAbsolute(
	AxisGroup := Robot,
	Execute := app.cmd.rbt_move = 1,
	CoordSystem := SMC_COORD_SYSTEM.ACS,
	VelFactor := app.cmd.rbt_move_fvel,
);
app.fbk.rbt_move_done  := app.fbk.rbt_move_done  OR MoveDirectAbsolute.Done;
app.fbk.rbt_move_error := app.fbk.rbt_move_error OR MoveDirectAbsolute.Error;


//2: MoveLinearAbsolute

MEMUtils.MemCpy(ADR(MoveLinearAbsolute.Position.v), ADR(app.cmd.rbt_move_coord), SIZEOF(app.cmd.rbt_move_coord));
MoveLinearAbsolute(
	AxisGroup := Robot,
	Execute := app.cmd.rbt_move = 2,
	CoordSystem := SMC_COORD_SYSTEM.WCS,
	Velocity     := app.cfg.robot_vel * app.cmd.rbt_move_fvel,
	Acceleration := app.cfg.robot_acc,
	Deceleration := app.cfg.robot_acc,
	Jerk         := app.cfg.robot_jrk,
);
app.fbk.rbt_move_done  := app.fbk.rbt_move_done  OR MoveLinearAbsolute.Done;
app.fbk.rbt_move_error := app.fbk.rbt_move_error OR MoveLinearAbsolute.Error;


//11: CNC

NCInterpreter.execute := app.cmd.rbt_move = 11;
NCInterpreter.interpolate();
app.fbk.rbt_move_done  := app.fbk.rbt_move_done  OR NCInterpreter.done;
app.fbk.rbt_move_error := app.fbk.rbt_move_error OR NCInterpreter.error;


//31: Conv pick

MEMUtils.MemCpy(ADR(Conv_Pick.ItemPos), ADR(app.cmd.rbt_move_coord), SIZEOF(app.cmd.rbt_move_coord));
Conv_Pick(
	Execute := app.cmd.rbt_move = 31,
	ItemConv := app.cmd.rbt_move_coord_conv,
);
app.fbk.rbt_move_done  := app.fbk.rbt_move_done  OR Conv_Pick.Done;
app.fbk.rbt_move_error := app.fbk.rbt_move_error OR Conv_Pick.Error;


//99: JOG

GroupJog.MaxLinearDistance := 0.001;
FOR i := 0 TO 2 DO
	GroupJog.Forward[i]  := app.cmd.rbt_move_coord[i] > 0;
	GroupJog.Backward[i] := app.cmd.rbt_move_coord[i] < 0;
	GroupJog.MaxLinearDistance := MAX(GroupJog.MaxLinearDistance, ABS(app.cmd.rbt_move_coord[i]));
END_FOR
GroupJog(
	AxisGroup := Robot,
	Enable := app.cmd.rbt_move = 99,
	CoordSystem := SMC_COORD_SYSTEM.WCS,
	MaxAngularDistance := 360,
	Velocity     := app.cfg.robot_vel * app.cmd.rbt_move_fvel,
	Acceleration := app.cfg.robot_acc,
	Deceleration := app.cfg.robot_acc,
	Jerk         := app.cfg.robot_jrk,
	VelFactor  := 1,
	AccFactor  := 1,
	JerkFactor := 1,
);
app.fbk.rbt_move_error := app.fbk.rbt_move_error OR GroupJog.error;
